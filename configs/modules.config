process {
    withName: 'JQ' {
        // -r : Print raw output
        ext.args = '-r'
    }
    withName: 'PRANK' {
        ext.args  = '-codon -once -F -prunetree'
        ext.args2 = '-convert -f=paml -keep'
    }
    withName: 'CODONPHYML' {
        ext.args  = [
            '-q',              // Sequence alignment is sequential
            '-o tlr',          // Optimization method is tlr
            '-m GY',           // Substituion model
            '-f empirical',    // Estimate equilibrium frequency directly from the data
            '--fmodel F3X4',   // Frequency model
            '-w DM0',          // single omega (w) model type
            '-t e'             // estimate transition/transversion rate ratio by maximum likelihood
        ].join(' ').trim()
    }
    withName: 'HYPHY' {
        // Tool parameters for hyphy <test>
        ext.args   = { 
            if ( params.species_labels ) {   // If labels are used:
                switch(params.hyphy_test) {
                    case 'absrel': '--branches CB'; break 
                    case 'relax' : '--test CB --reference PB'; break
                    case 'BUSTED-PH.bf': '--branches CB --comparison PB --srv No'; break
                    default      : ''
                }
            } else {                         // If labels are not used
                switch(params.hyphy_test) {
                    case 'absrel': '--branches Leaves'; break 
                    default      : ''
                }
            }
        }
        // Tool parameters for hyphy label-tree.bf
        ext.args2  = '--internal-nodes "None"'
    }
}
